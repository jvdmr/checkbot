package BotModules::LinkBot; #Peter De Wachter <pdewacht@vub.ac.be>
use strict;
use warnings;

#use LWP::UserAgent;
use URI::Find;
use WWW::Shorten::TinyURL;
use WWW::Shorten 'TinyURL';
use XML::LibXML;
use JSON::Parse 'parse_json';
#use utf8; # tells perl the below script contains UTF-8
use Encode;
use HTML::Entities;
use Mozilla::CA;
use File::Temp qw/ tempfile /;
use vars qw(@ISA);
@ISA = qw(BotModules);
1;

sub RegisterConfig {
	my $self = shift;
	$self->SUPER::RegisterConfig(@_);
	$self->registerVariables(
		# [name, save?, settable?, default]
		['url', 1, 1, {}],
		['history', 1, 1, 1],
	);
#    $ENV{GOOGLE_USERNAME} = 'check.infogroep';
#    $ENV{GOOGLE_PASSWORD} = 'lays3;looses';
#  $ENV{BITLY_USERNAME} = 'irccheck';
#  $ENV{BITLY_TOKEN} = '76d8a8b4929ea9f128dfc926a50015133385a51e';
}

sub Heard {
	my $self = shift;
	$self->scanForUrl(@_);
	return $self->SUPER::Heard(@_);
}

sub Told {
	my $self = shift;
	my ($event, $message) = @_;
	if ($message =~ /^you're drunk$/) {
		$self->{'history'} = 0;
		$self->saveConfig();
		$self->say($event, "Won't remember any of this later!");
	} elsif ($message =~ /^sober up$/) {
		$self->{'history'} = 1;
		$self->saveConfig();
		$self->say($event, "Thanks for that, it's all coming back to me now.");
	} elsif ($message =~ /^are you drunk\??$/) {
		$self->say($event, $self->{'history'} ? "Um, no, why would I be?" : "WOO BABY SHOW ME YER TITTIES");
	} else {
		$self->scanForUrl(@_);
	}
	return $self->SUPER::Told(@_);
}

sub scanForUrl {
	my $self = shift;
	my ($event, $message) = @_;

	return 0 if $event->{'from'} =~ /clojbot/i;

	return (URI::Find->new(
			sub {
				my $url = $_[1];
				my $comment = "";
				if ($message =~ / #(.*)$/) {
					$comment = $1;
				}
				$self->reportOnUrl($event, $url, $comment);
			}
		)->find(\$message) == 1);
}

sub writeToHistory {
	my $self = shift;
	my ($event, $url, $comment) = @_;
	return 0 unless $self->{'history'};
	$comment = "[no title]" unless length($comment) > 0;

	open F, '>>', 'feeds/url-history' || return;
	print F "$event->{'from'}\t$event->{'time'}\t$comment\t$url\n";
	close F;
}

sub reportOnUrl {
	my $self = shift;
	my ($event, $url, $comment) = @_;

	$self->spawnHead($event, $url, 1, $comment);
}

sub spawnHead {
	my $self = shift;
	my ($event, $url, $shorten, $comment) = @_;
	my ($tmp_headers_fh, $tmp_headers_fn) = tempfile();
#  $self->debug("\$tmp_headers: $tmp_headers_fn");
	$self->spawnChild(
		$event,
		'curl',
		[
			'-s', # silent
			'-D', $tmp_headers_fn, # dump headers
		 	'-A', 'Mozilla/5.0 (compatible; mozbot)', # user-agent
		 	'-H', 'Accept-Language: nl,en', # other headers
		 	$url
		],
		'LinkBot GET', [ $url, $shorten, $comment, $tmp_headers_fh, $tmp_headers_fn]
	);
}

sub ChildCompleted {
	my $self = shift;
	my ($event, $type, $output, $url, $shorten, $comment, $tmp_headers_fh, $tmp_headers_fn) = @_;
#  $self->debug("\$output: $output");
#  $self->debug("\$type: $type");
#  $self->debug("\$shorten: $shorten");
#  $self->debug("\$comment: $comment");

	if ($type eq 'LinkBot GET') {
		my $message = $self->shorten_url($url);
		my $headers = <$tmp_headers_fh>;
		File::Temp::unlink1($tmp_headers_fh, $tmp_headers_fn);
		my ($size, $type);
#    $self->debug("\$headers: $headers");
		if ($headers =~ /^content-length:\s*([0-9]+)\s*$/im) {
			$size = $1;
		}
		if ($headers =~ /^content-type:\s*(\S+)\s*$/im) {
			$type = $1;
		}

#    $self->debug("\$size: $size");
#    $self->debug("\$type: $type");

		if (defined($size) and (not $shorten or $size > 1024*1024/4)) {
			# I don't remember why we do this...
			if ($shorten) {
				$url =~ s/.*\/(.+)/$1/;
				$url =~ s/%([0-9A-Za-z]{2})/chr hex $1/ge;
			}
			$message .= " - " if length($message) > 0;
			$message .= $url;
			$message .= ": " . $self->formatSize($size);
			$message .= " [$type]" if defined($type);
		}
		$self->say($event, $message) if length($message) > 0;

		my $output_title = '';

		my $parser = XML::LibXML->new();
		my $tree = $parser->load_html(
			string => $output,
			encoding => "utf-8",
			recover => 2,
			validation => 0,
		);

		$output_title = $tree->findvalue('/html/head/title');

#    $self->debug("\$output_title: $output_title");
		$output_title = Encode::encode('utf-8', $output_title);
#    $self->debug("\$output_title: $output_title");
		decode_entities($output_title);
#    $self->debug("\$output_title: $output_title");
		my $title = length($comment) > 0 ? $comment . " | " . $output_title : $output_title;
#    $self->debug("\$title: $title");
		$title =~ s/\s\s+|\n+/ /g;
		$title =~ s/^\s+|\s+$//g;
#    $self->debug("\$title: $title");

		if ($url =~ /youtu\.?be/) {
			$title = $self->parseYoutubeTitle($output, $title);
		}

		$self->say($event, $title);

		$self->writeToHistory($event, $url, $title);
		$self->SUPER::ChildCompleted(@_);
	}
}

sub parseYoutubeTitle {
	my $self = shift;
	my ($output, $title) = @_;
	if ($output =~ /var ytInitialData = (.*?);/) {
		my $data_s = $1;
		my $data = parse_json($data_s);
		my $ytTitle = $data->{playerOverlays}{playerOverlayRenderer}{videoDetails}{playerOverlayVideoDetailsRenderer}{title}{simpleText};
		$title = $ytTitle . " " . $title;
	}
	return $title;
}

sub shorten_url {
	my $self = shift;
	my $url = shift;
#  $self->debug("\$url: $url");
#  my $len = length($url);
#  $self->debug("length(\$url): $len");
	if (length($url) > 50) {
		return makeashorterlink($url);
	}
	return "";
}

sub formatSize {
	my $self = shift;
	my ($size) = @_;

	my $s = int($size / 1024 / 1024 / 1024 + 0.5);
	return "$s GB" if $s > 0;

	$s = int($size / 1024 / 1024 + 0.5);
	return "$s MB" if $s > 0;

	$s = int($size / 1024 + 0.5);
	return "$s KB" if $s > 0;

	return "$size bytes";
}
