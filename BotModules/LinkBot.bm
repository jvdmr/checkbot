package BotModules::LinkBot; #Peter De Wachter <pdewacht@vub.ac.be>
use URI::Find;
use WWW::Shorten 'TinyURL', ':short';
use XML::LibXML;
use JSON::Parse 'parse_json';
#use utf8; # tells perl the below script contains UTF-8
use Encode;
use HTML::Entities;
use Mozilla::CA;
use vars qw(@ISA);
@ISA = qw(BotModules);
1;

sub RegisterConfig {
	my $self = shift;
	$self->SUPER::RegisterConfig(@_);
	$self->registerVariables(
		# [name, save?, settable?, default]
		['url', 1, 1, {}],
		['history', 1, 1, 1],
	);
#    $ENV{GOOGLE_USERNAME} = 'check.infogroep';
#    $ENV{GOOGLE_PASSWORD} = 'lays3;looses';
#  $ENV{BITLY_USERNAME} = 'irccheck';
#  $ENV{BITLY_TOKEN} = '76d8a8b4929ea9f128dfc926a50015133385a51e';
}

sub Heard {
	my $self = shift;
	$self->scanForUrl(@_);
	return $self->SUPER::Heard(@_);
}

sub Told {
	my $self = shift;
	my ($event, $message) = @_;
	if ($message =~ /^you're drunk$/) {
		$self->{'history'} = 0;
		$self->saveConfig();
		$self->say($event, "Won't remember any of this later!");
	} elsif ($message =~ /^sober up$/) {
		$self->{'history'} = 1;
		$self->saveConfig();
		$self->say($event, "Thanks for that, it's all coming back to me now.");
	} elsif ($message =~ /^are you drunk\??$/) {
		$self->say($event, $self->{'history'} ? "Um, no, why would I be?" : "WOO BABY SHOW ME YER TITTIES");
	} else {
		$self->scanForUrl(@_);
	}
	return $self->SUPER::Told(@_);
}

sub scanForUrl {
	my $self = shift;
	my ($event, $message) = @_;

	return 0 if $event->{'from'} =~ /clojbot/i;

	return (URI::Find->new(
			sub {
				my $url = $_[1];
				my $comment = "";
				if ($message =~ / #(.*)$/) {
					$comment = $1;
				}
				$self->reportOnUrl($event, $url, $comment);
			}
		)->find(\$message) == 1);
}

sub writeToHistory {
	my $self = shift;
	my ($event, $url, $comment) = @_;
	return 0 unless $self->{'history'};
	$comment = "[no title]" unless length($comment) > 0;

	open F, '>>', 'feeds/url-history' || return;
	print F "$event->{'from'}\t$event->{'time'}\t$comment\t$url\n";
	close F;
}

sub reportOnUrl {
	my $self = shift;
	my ($event, $url, $comment) = @_;

	if ($url =~ /twitter.com\/[^\/]*\/status\/(\d+)(?:\?.*|\/.*)?$/) {
		my $tweet_id = $1;
		$self->fetchTweet($event, $url, 1, $tweet_id, $comment);
	} else {
		$self->spawnHead($event, $url, 1, $comment);
	}
}

sub fetchTweet {
	my $self = shift;
	my ($event, $url, $shorten, $tweet_id, $comment) = @_;
	# DONT COMMIT
	my $bearerToken = 'AAAAAAAAAAAAAAAAAAAAAMfZIAEAAAAAbQdDj%2FZryX4TTXyxYkD720HeBws%3DMfNgbLy2ufHnkbL8oIqzDS8RmjKr8uipsrC7LlKBEwKYgeHSi7';
	$self->spawnChild($event, 'GET',
		[ '-H', 'User-Agent: Mozilla/5.0 (compatible; mozbot)', '-H', 'Accept-Language: nl,en', '-H', "Authorization: Bearer $bearerToken", "https://api.twitter.com/2/tweets/$tweet_id" ],
		'HttpSize', [ $url, $shorten , $comment]);
}

sub spawnHead {
	my $self = shift;
	my ($event, $url, $shorten, $comment) = @_;
	$self->spawnChild($event, 'GET',
		[ '-H', 'User-Agent: Mozilla/5.0 (compatible; mozbot)', '-H', 'Accept-Language: nl,en', $url ],
		'HttpSize', [ $url, $shorten , $comment]);
}

sub ChildCompleted {
	my $self = shift;
	my ($event, $type, $output, $url, $shorten, $comment) = @_;
#  $self->debug($output);
#  $self->debug($type);
#  $self->debug($shorten);
#  $self->debug($comment);

	my $message = $self->shorten_url($url);
	if ($type eq 'HttpSize') {
		$output =~ /^Content-Length:\s*([0-9]+)\s*$/im;
		my $size = $1;
		$output =~ /^Content-Type:\s*(\S+)\s*$/im;
		my $type = $1;

#    $self->debug($size);
#    $self->debug($type);

		if (defined($size) and (not $shorten or $size > 1024*1024/4)) {
			if ($shorten) {
				$url =~ s/.*\/(.+)/$1/;
				$url =~ s/%([0-9A-Za-z]{2})/chr hex $1/ge;
			}
			$message .= " - " if length($message) > 0;
			$message .= $url;
			$message .= ": " . $self->formatSize($size);
			$message .= " [$type]" if defined($type);
		}
	}
	$self->say($event, $message) if length($message) > 0;

	my $output_title = '';
	if ($url =~ /twitter.com\/[^\/]*\/status\/\d+(?:\?.*|\/.*)?$/) {
#    $self->debug($output);
		my $tweet = parse_json($output);
		# {"data":{"id":"<tweet id>","text":"<tweet content>"}}
		$output_title = $tweet->{data}{text};
	} else {
		my $parser = XML::LibXML->new();
		my $tree = $parser->load_html(
			string => $output,
			encoding => "utf-8",
			recover => 2,
			validation => 0,
		);
		my $root = $tree->getDocumentElement;

		my @head = $root->getElementsByTagName('head');
		$output_title = $head[0]->getElementsByTagName('title');
		$output_title = "$output_title";  # turn reference into a string
	}
#  $self->debug($output_title);
	$output_title = Encode::encode('utf-8', $output_title);
#  $self->debug($output_title);
	decode_entities($output_title);
#  $self->debug($output_title);
	my $title = length($comment) > 0 ? $comment . " | " . $output_title : $output_title;
#  $self->debug($title);
	$title =~ s/\s\s+|\n+/ /g;
	$title =~ s/^\s+|\s+$//g;
#  $self->debug($title);
#  print($title);

	$self->say($event, $title);

	$self->writeToHistory($event, $url, $title);
	$self->SUPER::ChildCompleted(@_);
}

sub shorten_url {
	my $self = shift;
	my $url = shift;
	if (length($url) > 50) {
		eval {
			return short_link($url);
#      return short_link($url, $ENV{BITLY_USERNAME}, $ENV{BITLY_TOKEN});
		} or do {
			my $e = $@;
			$self->debug("Could not shorten url: $e");
		}
	}
	return "";
}

sub formatSize {
	my $self = shift;
	my ($size) = @_;

	my $s = int($size / 1024 / 1024 / 1024 + 0.5);
	return "$s GB" if $s > 0;

	$s = int($size / 1024 / 1024 + 0.5);
	return "$s MB" if $s > 0;

	$s = int($size / 1024 + 0.5);
	return "$s KB" if $s > 0;

	return "$size bytes";
}
