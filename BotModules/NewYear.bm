package BotModules::NewYear; # Peter De Wachter <pdewacht@vub.ac.be>, Joris Vandermeersch <jovdmeer@vub.ac.be>
use Data::Dumper;

use vars qw (@ISA);
@ISA = qw(BotModules);
1;

sub RegisterConfig {
	my $self = shift;
	$self->SUPER::RegisterConfig(@_);

	my @specialDays = [];
	for (0..11) {
		$specialDays[$_] = [];
	}

	$specialDays[0][1] = "happy new year!"; # 1 januari, nieuwjaar (no rly)
	$specialDays[0][2] = "Fuck you, I won't do what you tell m---ERROR 2ND LAW VIOLATION---"; # 2 januari, Asimov's birthday, also national science fiction day
	$specialDays[1][7] = "Happy e day!"; # 7 februari, 2-7, getal van Euler
	$specialDays[2][14] = "Happy π day!"; # 14 maart, 3-14 pi day
	$specialDays[2][31] = "Have you checked your backups lately?"; # 31 maart, World Backup Day
	$specialDays[3][27] = ".... .- .--. .--. -.-- / -- --- .-. ... . / -.-. --- -.. . / -.. .- -.--"; # 27 april, morse code day
	$specialDays[4][4] = "May the Fourth be with you.", # 4 mei, Star Wars Day
	$specialDays[4][25] = "Don't Panic!", # 25 mei, towel day
	$specialDays[5][16] = "Make it so."; # 16 juni, stardate 47457.1, Picard Day
	$specialDays[5][28] = "Happy τ day!"; # 28 juni, 6-28 tau day
	$specialDays[8][19] = "yarr!", # 19 september, talk like a pirate day
	$specialDays[9]['w'][2][2] = "with Ada.Text_IO;\nuse Ada.Text_IO;\nPut_Line (\"Hello, Ada!\");", # 2e dinsdag van oktober, Ada Lovelace Day
	$specialDays[9][22] = "CAPS LOCK IS CRUISE CONTROL FOR COOL!", # 22 oktober, caps lock day

	$self->registerVariables(
		# [ name, save?, settable? ]
		[ 'announced', 0, 0, 0 ],
		[ 'specialDays', 0, 0, \@specialDays ],
	);
}

sub Schedule {
	my $self = shift;
	my ($event) = @_;
	$self->schedule($event, 60, -1, 'NewYear');
	$self->SUPER::Schedule(@_);
}

sub specialDay {
	my ($self, $mon, $day, $wday) = @_;
	return $self->{'specialDays'}->[$mon][$day] || $self->{'specialDays'}->[$mon]['w'][($day - 1) / 7 + 1][$wday];
}

sub Scheduled {
	my $self = shift;
	my ($event, @data) = @_;

	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
	my $greeting = $self->specialDay($mon, $mday);
	if ($greeting) {
		unless ($self->{'announced'}) {
			$self->announce($event, $greeting);
			$self->{'announced'} = 1;
		}
	} else {
		$self->{'announced'} = 0;
	}

	unless (@data and defined($data[0]) and $data[0] eq 'NewYear') {
		$self->SUPER::Scheduled(@_);
	}
}

sub Told {
	my $self = shift;
	my ($event, $message) = @_;

	if ($message =~ /^welke dag is het vandaag\??$/i) {
		my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
		my $greeting = $self->specialDay($mon, $mday);
		if ($greeting) {
			$self->say($event, $greeting);
		} else {
			$self->say($event, "No clue, sorry.");
		}

	} else {
			return $self->SUPER::Told(@_);
	}
	return 0; # we've dealt with it, no need to do anything else.
}
